function [ best_transformation, inliers_im1, inliers_im2 ] = RANSAC(image1, image2, N, T, P, visualization)

%RANSAC Finds the best transformation between two images.
% Input parameters:
%   image1, image2      Rgb or grayscale images.
%   N                   Amount of iterations (default: 1).
%   T                   Total set of matches.
%   P                   Amount of (random) samples from T.
%   transformation      Method of transformation (default: 'nearest').
%   visualization       Boolean for visualizing figures (default: true).

close ALL % close all figures

% set default parameters
if nargin == 0
    image1 = imread('boat1.pgm');
    image2 = imread('boat2.pgm');
end
if nargin < 3
    N = 50;
end
if nargin < 4
    [ T, f1, f2 ] = keypoint_matching(image1, image2);
end
if nargin < 5
    P = 5;
end
if nargin < 7
    transformation = 'nearest';
end
if nargin < 7
    visualization = false;
end

matches_im1 = T(1, :);
matches_im2 = T(2, :);

largest_num_inliers = 0;
best_transformation = zeros(6, 1);

% Repeat N times
for n = 1:N
    
    % Pick P matches at random from the total set of matches T
    perm = randperm(size(T, 2)); % shuffle indices randomly
    sel = perm(1:P); % pick the first P indices
    sel_matches_im1 = T(1, sel); % take the corresponding pairs of T in image 1
    sel_matches_im2 = T(2, sel); % take the corresponding pairs of T in image 2
    
    % Using f1 and f2, get the coordinates of these points.
    % Currently P is set to ONE, so now it is for one point.
    % TODO: fix for multiple points (including solving Ax=b).
     x1 = f1(1, sel_matches_im1);
     y1 = f1(2, sel_matches_im1);
     x2 = f2(1, sel_matches_im2);
     y2 = f2(2, sel_matches_im2);

    % Construct a matrix A and vector b using the P pairs of points
    % and find transformation parameters (m1, m2, m3, m4, t1, t2) 
    % by solving the equation Ax = b.
    A = zeros(P*2, 6);
    
    A(1:2:end, 1) = x1;
    A(1:2:end, 2) = y1;
    A(2:2:end, 3) = x1;
    A(2:2:end, 4) = y1;    

    A(1:2:end, 5) = 1;
    A(2:2:end, 6) = 1;
    
    b = zeros(P*2, 1);
    b(1:2:end) = x2;
    b(2:2:end) = y2;    

    x =  pinv(A) * b; % Solve Ax = b     x = [ m1, m2, m3, m4, t1, t2 ]'
    
    % Using the transformation parameters, transform the locations of all T points in image1.
    % If the transformation is correct, they should lie close to their counterparts in image2. 
    % Plot the two images side by side with a line connecting the original T points in image1 
    % and transformed T points over image2.

    x1 = f1(1, matches_im1);
    y1 = f1(2, matches_im1); 
    
    A = zeros(length(x1)*2, 6);
    A(1:2:end, 5)  = 1;
    A(2:2:end, 6)  = 1;
    
    A(1:2:end, 1) = x1;
    A(1:2:end, 2) = y1;
    A(2:2:end, 3) = x1;
    A(2:2:end, 4) = y1;  
    
    b = A*x;
    
    % For visualization, show the transformations from image1 to image2 
    % and from image2 to image1.
%     if visualization
%         visualization(image1, image2, f1, transformed_f1)
%     end
    
    %im1_feat_points = [ x1 ; y1 ];
    trans_im1_feat_points = [ b(1:2:end), b(2:2:end) ]';
    OG_im2_feat_points = f2(1:2, matches_im2);
    
    distance = sqrt(...
    (trans_im1_feat_points(1, :) - OG_im2_feat_points(1, :)).^2 + ...
    (trans_im1_feat_points(2, :) - OG_im2_feat_points(2, :)).^2);

    num_inliers = length(trans_im1_feat_points(:, distance < 10));

    if num_inliers > largest_num_inliers
        largest_num_inliers = num_inliers;
        best_transformation = x;

        inliers_im1 = trans_im1_feat_points(:, distance < 10);
        inliers_im2 = OG_im2_feat_points(:, distance < 10);
    end 
    
    % Show transformation
    %tform = affine2d([x(1) -x(2) 0; -x(3) x(4) 0; 0 0 1]);
    %result = imwarp(image1, tform);
    %figure, imshow(result)    
    
end
 
% Transform the image using the best transformation matrix and method
if strcmp(transformation, 'nearest') % nearest neighbour interpolation
    result = transform(image1, best_transformation);
elseif strcmp(transformation, 'affine2d') % affine2d with imwarp
    tform = affine2d([best_transformation(1) -best_transformation(2) 0; ...
    -best_transformation(3) best_transformation(4) 0; 0 0 1]);
    result = imwarp(image1, tform);
else % maketform with imtransform (not recommended)
    tform = maketform('affine', [best_transformation(1) -best_transformation(2) 0; ...
    -best_transformation(3) best_transformation(4) 0; 0 0 1]);
    result = imtransform(image1 ,tform);      
end

% Show transformation

%tform = affine2d([best_transformation(1) -best_transformation(2) 0; ...
%    -best_transformation(3) best_transformation(4) 0; ...
%    0 0 1]);
%result = imwarp(image1, tform);
%figure, imshow(result)
    
% Transform the image using the best transformation matrix
%t_image = transform(image1, best_transformation);
%figure, imshow(result), title(strcat('Rotation using', ': ', transformation));

end


function [ t_image ] = transform(image, trans)
    % Transformation matrix
    M = [[trans(1) trans(2)]
         [trans(3) trans(4)]];
    % Translation matrix
    translation = [trans(5), trans(6)]';

    [ h, w, c ] = size(image);
    if c == 3
        image = rgb2gray(image);
    end
    
    t_11 = M * [ 1; 1 ] + translation; % The transformed coordinates of the upper left corner
    t_1w = M * [ 1; w ] + translation; % The transformed coordinates of the upper right corner
    t_h1 = M * [ h; 1 ] + translation; % The transformed coordinates of the lower left corner
    t_hw = M * [ h; w ] + translation; % The transformed coordinates of the lower right corner
    
    t_ymin = min([ t_11(1), t_1w(1), t_h1(1), t_hw(1) ]); % Minimum y
    t_xmin = min([ t_11(2), t_1w(2), t_h1(2), t_hw(2) ]); % Minimum x

    t_h = max([ t_11(1), t_1w(1), t_h1(1), t_hw(1) ]) - t_ymin; % Height of the transformation
    t_w = max([ t_11(2), t_1w(2), t_h1(2), t_hw(2) ]) - t_xmin; % Width of the transformation

    t_image = zeros(ceil(t_h), ceil(t_w)); % Create empty matrix for transformation
    
    for y_t = 1:t_h
        for x_t = 1:t_w
            
            % Get the coordinates of the original image that correspond
            % with the transformed image
            im1_c = round(inv(M) * ([ y_t; x_t ] - translation + [ t_ymin; t_xmin ]));
            
            % When inside the original image, get pixel intensity
            if im1_c(1) > 0 && im1_c(1) < h && im1_c(2) > 0 && im1_c(2) < w
                t_image(y_t, x_t) = image(im1_c(1), im1_c(2));

            % Black otherwise
            else
                t_image(y_t, x_t) = 0;
            end
        end
    end
    
%     t_image_map = zeros(h, w, 3);    
%     for y = 1:h
%         for x = 1:w
%            coords = [y, x]';
%            translated_point = M * coords + translation;
%            t_y = round(translated_point(1));
%            t_x = round(translated_point(2));
%            t_image_map(y, x, 1) = t_y;
%            t_image_map(y, x, 2) = t_x;
%            t_image_map(y, x, 3) = image(y, x);
%         end
%     end
%     
%     t_image_map(:, :, 1) = t_image_map(:, :, 1) ...
%         - min(min(t_image_map(:, :, 1))) + 1;
%     t_image_map(:, :, 2) = t_image_map(:, :, 2) ...
%         - min(min(t_image_map(:, :, 2))) + 1;
%     
%     max_y = max(max(t_image_map(:, :, 1)));
%     max_x = max(max(t_image_map(:, :, 2)));
%     
%     image_trans = zeros(max_y, max_x);
%     figure, imshow(image_trans)
%     for y = 1:h
%         for x = 1:w
%             t_y = t_image_map(y, x, 1);
%             t_x = t_image_map(y, x, 2);
%             i   = t_image_map(y, x, 3);
%             image_trans(t_y, t_x) = i;
%         end
%     end
    
%t_image = mat2gray(t_image);
%figure, imshow(mat2gray(t_image))
end

function visualization(image1_rgb, image2_rgb, f1, f2)
figure, imshowpair(image1_rgb, image2_rgb, 'montage') % init figure
title('Matching features in both images')

[ ~, w, ~ ] = size(image1_rgb);

hold on

% Draw lines between each pair of points
for i = 1:50
    x = [f1(1, i) f2(1, i) + w];
    y = [f1(2, i) f2(2, i) ];
    line(x, y, 'Color', 'green', 'LineWidth', 1)
end

hold off

end

